import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
import json
from datetime import datetime, timedelta
import pytz
import matplotlib.pyplot as plt
import io
import csv
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –ö–∏—î–≤–∞
KYIV_TZ = pytz.timezone('Europe/Kyiv')

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '7616087734:AAFW_N5etPdTGQdim8PWEkRP7Tp58P61GcA'  # –ó–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω

# –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
DATA_FILE = 'finance_data.json'

# –¢–≤—ñ–π Telegram ID
ALLOWED_USER_ID = 997763291

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É
def check_access(update):
    user_id = update.effective_chat.id
    if user_id != ALLOWED_USER_ID:
        update.message.reply_text('–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –¶–µ–π –±–æ—Ç –ª–∏—à–µ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.')
        return False
    return True

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
def load_data():
    try:
        with open(DATA_FILE, 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {'spends': {}, 'profits': {}}

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
def save_data(data):
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=4)

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
async def start(update, context):
    if not check_access(update):
        return
    keyboard = [
        [InlineKeyboardButton("üìâ –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É", callback_data='add_spend'),
         InlineKeyboardButton("üìà –î–æ–¥–∞—Ç–∏ –ø—Ä–∏–±—É—Ç–æ–∫", callback_data='add_profit')],
        [InlineKeyboardButton("üè† –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ –∂–∏—Ç—Ç—è", callback_data='add_living_expense')],
        [InlineKeyboardButton("üìä –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data='stats'),
         InlineKeyboardButton("üìã –í–∏–∫–∞—á–∞—Ç–∏ –¥–∞–Ω—ñ", callback_data='export')],
        [InlineKeyboardButton("üìä –ì—Ä–∞—Ñ—ñ–∫ –∑–∞ –¥–µ–Ω—å", callback_data='graph_day'),
         InlineKeyboardButton("üìä –ì—Ä–∞—Ñ—ñ–∫ –∑–∞ –º—ñ—Å—è—Ü—å", callback_data='graph_month')],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é –¥—ñ—é", callback_data='cancel_last')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–û–±–µ—Ä–∏ –¥—ñ—é:', reply_markup=reply_markup)
    logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /start")

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button(update, context):
    query = update.callback_query
    await query.answer()
    user_id = str(query.message.chat_id)

    if query.data == 'add_spend':
        await query.edit_message_text('–í–≤–µ–¥–∏ —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 50):')
        context.user_data['action'] = 'add_spend'
    elif query.data == 'add_profit':
        await query.edit_message_text('–í–≤–µ–¥–∏ —Å—É–º—É –ø—Ä–∏–±—É—Ç–∫—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 100):')
        context.user_data['action'] = 'add_profit'
    elif query.data == 'add_living_expense':
        await query.edit_message_text('–í–≤–µ–¥–∏ —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç –Ω–∞ –∂–∏—Ç—Ç—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 200):')
        context.user_data['action'] = 'add_living_expense'
    elif query.data == 'stats':
        await show_stats(query, context, user_id)
    elif query.data == 'export':
        await export_data(query, context, user_id)
    elif query.data == 'graph_day':
        await send_graph(query, context, user_id, period='day')
    elif query.data == 'graph_month':
        await send_graph(query, context, user_id, period='month')
    elif query.data == 'cancel_last':
        await cancel_last_action(query, context, user_id)

# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update, context):
    if not check_access(update):
        return
    user_id = str(update.message.chat_id)
    action = context.user_data.get('action')
    if not action:
        await update.message.reply_text('–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä–∏ –¥—ñ—é —á–µ—Ä–µ–∑ /start.')
        return

    try:
        amount = float(update.message.text)
        if amount <= 0:
            raise ValueError
        data = load_data()
        now = datetime.now(KYIV_TZ).strftime('%Y-%m-%d %H:%M')
        date = datetime.now(KYIV_TZ).strftime('%Y-%m-%d')

        if action == 'add_spend':
            if user_id not in data['spends']:
                data['spends'][user_id] = {}
            if date not in data['spends'][user_id]:
                data['spends'][user_id][date] = []
            data['spends'][user_id][date].append({'amount': -amount, 'time': now, 'type': 'spend'})
            save_data(data)
            await update.message.reply_text(f'üìâ –î–æ–¥–∞–Ω–æ –≤–∏—Ç—Ä–∞—Ç—É: ${amount} –æ {now.split(" ")[1]}')
        elif action == 'add_profit':
            if user_id not in data['profits']:
                data['profits'][user_id] = {}
            if date not in data['profits'][user_id]:
                data['profits'][user_id][date] = []
            data['profits'][user_id][date].append({'amount': amount, 'time': now, 'type': 'profit'})
            save_data(data)
            await update.message.reply_text(f'üìà –î–æ–¥–∞–Ω–æ –ø—Ä–∏–±—É—Ç–æ–∫: ${amount} –æ {now.split(" ")[1]}')
        elif action == 'add_living_expense':
            if user_id not in data['spends']:
                data['spends'][user_id] = {}
            if date not in data['spends'][user_id]:
                data['spends'][user_id][date] = []
            data['spends'][user_id][date].append({'amount': -amount, 'time': now, 'type': 'living'})
            save_data(data)
            await update.message.reply_text(f'üè† –î–æ–¥–∞–Ω–æ –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ –∂–∏—Ç—Ç—è: ${amount} –æ {now.split(" ")[1]}')

        context.user_data['action'] = None
        await start(update, context)
    except ValueError:
        await update.message.reply_text('–í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 50).')

# –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –¥–µ–Ω—å
async def show_stats(query, context, user_id):
    data = load_data()
    date = datetime.now(KYIV_TZ).strftime('%Y-%m-%d')
    total_spend = sum(item['amount'] for item in data['spends'].get(user_id, {}).get(date, []))
    total_profit = sum(item['amount'] for item in data['profits'].get(user_id, {}).get(date, []))
    response = f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {date}:\n–°—É–º–∞—Ä–Ω–æ –∑–∞ –¥–µ–Ω—å: {total_spend:.2f} / +{total_profit:.2f}'
    await query.edit_message_text(response)

# –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö —É CSV
async def export_data(query, context, user_id):
    data = load_data()
    filename = f'finance_{user_id}.csv'
    with open(filename, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(['–¢–∏–ø', '–°—É–º–∞', '–ß–∞—Å', '–î–∞—Ç–∞'])
        for date, spends in data.get('spends', {}).get(user_id, {}).items():
            for item in spends:
                writer.writerow([item['type'], item['amount'], item['time'].split(' ')[1], date])
        for date, profits in data.get('profits', {}).get(user_id, {}).items():
            for item in profits:
                writer.writerow([item['type'], item['amount'], item['time'].split(' ')[1], date])
    with open(filename, 'rb') as f:
        await query.message.reply_document(document=f, filename=filename)
    await query.edit_message_text('üìã –î–∞–Ω—ñ –≤–∏–∫–∞—á–∞–Ω–æ —É —Ñ–∞–π–ª—ñ CSV!')

# –ì—Ä–∞—Ñ—ñ–∫ –∑–∞ –¥–µ–Ω—å –∞–±–æ –º—ñ—Å—è—Ü—å
async def send_graph(query, context, user_id, period='day'):
    data = load_data()
    now = datetime.now(KYIV_TZ)
    if period == 'day':
        date = now.strftime('%Y-%m-%d')
        spends = data.get('spends', {}).get(user_id, {}).get(date, [])
        profits = data.get('profits', {}).get(user_id, {}).get(date, [])
        title = f'–ì—Ä–∞—Ñ—ñ–∫ –∑–∞ {date}'
    else:  # month
        month_start = now.replace(day=1).strftime('%Y-%m-%d')
        spends = []
        profits = []
        for date in data.get('spends', {}).get(user_id, {}).keys():
            if date.startswith(now.strftime('%Y-%m')):
                spends.extend(data['spends'][user_id][date])
        for date in data.get('profits', {}).get(user_id, {}).keys():
            if date.startswith(now.strftime('%Y-%m')):
                profits.extend(data['profits'][user_id][date])
        title = f'–ì—Ä–∞—Ñ—ñ–∫ –∑–∞ {now.strftime("%B %Y")}'

    times = [item['time'].split(' ')[1] for item in spends + profits]
    amounts = [item['amount'] for item in spends + profits]
    
    if not times:
        await query.edit_message_text(f'üìä –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫–∞ –∑–∞ {period}.')
        return
    
    plt.figure(figsize=(10, 5))
    plt.plot(times, amounts, marker='o', linestyle='-', color='b')
    plt.title(title)
    plt.xlabel('–ß–∞—Å')
    plt.ylabel('–°—É–º–∞ ($)')
    plt.xticks(rotation=45)
    plt.grid(True)
    
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    await query.message.reply_photo(photo=buf, caption=title)
    buf.close()
    plt.close()
    await query.edit_message_text('–ì—Ä–∞—Ñ—ñ–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!')

# –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –¥—ñ—ó
async def cancel_last_action(query, context, user_id):
    data = load_data()
    date = datetime.now(KYIV_TZ).strftime('%Y-%m-%d')
    spends = data.get('spends', {}).get(user_id, {}).get(date, [])
    profits = data.get('profits', {}).get(user_id, {}).get(date, [])

    if spends and profits:
        last_spend = spends[-1] if spends else {'time': '00:00'}
        last_profit = profits[-1] if profits else {'time': '00:00'}
        if last_spend['time'] > last_profit['time']:
            removed = spends.pop()
            data['spends'][user_id][date] = spends
            save_data(data)
            await query.edit_message_text(f'‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ –æ—Å—Ç–∞–Ω–Ω—é –≤–∏—Ç—Ä–∞—Ç—É: ${-removed["amount"]} –æ {removed["time"].split(" ")[1]}')
        else:
            removed = profits.pop()
            data['profits'][user_id][date] = profits
            save_data(data)
            await query.edit_message_text(f'‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø—Ä–∏–±—É—Ç–æ–∫: ${removed["amount"]} –æ {removed["time"].split(" ")[1]}')
    elif spends:
        removed = spends.pop()
        data['spends'][user_id][date] = spends
        save_data(data)
        await query.edit_message_text(f'‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ –æ—Å—Ç–∞–Ω–Ω—é –≤–∏—Ç—Ä–∞—Ç—É: ${-removed["amount"]} –æ {removed["time"].split(" ")[1]}')
    elif profits:
        removed = profits.pop()
        data['profits'][user_id][date] = profits
        save_data(data)
        await query.edit_message_text(f'‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø—Ä–∏–±—É—Ç–æ–∫: ${removed["amount"]} –æ {removed["time"].split(" ")[1]}')
    else:
        await query.edit_message_text('‚ùå –ù–µ–º–∞—î –¥—ñ–π –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—å–æ–≥–æ–¥–Ω—ñ.')
    await start(query, context)

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.run_polling()

if __name__ == '__main__':
    main()