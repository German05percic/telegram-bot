import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
import json
from datetime import datetime, timedelta
import pytz
import matplotlib.pyplot as plt
import io
import csv
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –ö–∏—î–≤–∞
KYIV_TZ = pytz.timezone('Europe/Kyiv')

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '7616087734:AAFW_N5etPdTGQdim8PWEkRP7Tp58P61GcA'  # –ó–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω

# –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
DATA_FILE = 'finance_data.json'

# –ú–æ–≤–∏
LANGUAGES = {
    'ua': {
        'start': '–û–±–µ—Ä–∏ –¥—ñ—é:',
        'add_spend': 'üìâ –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É',
        'add_profit': 'üìà –î–æ–¥–∞—Ç–∏ –ø—Ä–∏–±—É—Ç–æ–∫',
        'add_living': 'üè† –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ –∂–∏—Ç—Ç—è',
        'stats_day': 'üìä –ó–∞ –¥–µ–Ω—å',
        'stats_week': 'üìä –ó–∞ —Ç–∏–∂–¥–µ–Ω—å',
        'stats_month': 'üìä –ó–∞ –º—ñ—Å—è—Ü—å',
        'balance': 'üí∞ –ë–∞–ª–∞–Ω—Å',
        'export': 'üìã –í–∏–∫–∞—á–∞—Ç–∏ –¥–∞–Ω—ñ',
        'graph_day': 'üìä –ì—Ä–∞—Ñ—ñ–∫ –∑–∞ –¥–µ–Ω—å',
        'graph_month': 'üìä –ì—Ä–∞—Ñ—ñ–∫ –∑–∞ –º—ñ—Å—è—Ü—å',
        'cancel': '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –¥—ñ—ó',
        'choose_category': '–û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∏—Ç—Ä–∞—Ç:',
        'food': 'üçî –á–∂–∞',
        'transport': 'üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
        'entertainment': 'üéâ –†–æ–∑–≤–∞–≥–∏',
        'living': 'üè† –ñ–∏—Ç—Ç—è',
        'other': '–Ü–Ω—à–µ',
        'enter_spend': '–í–≤–µ–¥–∏ —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç–∏ –¥–ª—è "{category}" (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 50):',
        'enter_profit': '–í–≤–µ–¥–∏ —Å—É–º—É –ø—Ä–∏–±—É—Ç–∫—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 100):',
        'enter_living': '–í–≤–µ–¥–∏ —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç –Ω–∞ –∂–∏—Ç—Ç—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 200):',
        'added_spend': 'üìâ –î–æ–¥–∞–Ω–æ –≤–∏—Ç—Ä–∞—Ç—É ({category}): ${amount} –æ {time}',
        'added_profit': 'üìà –î–æ–¥–∞–Ω–æ –ø—Ä–∏–±—É—Ç–æ–∫: ${amount} –æ {time}',
        'added_living': 'üè† –î–æ–¥–∞–Ω–æ –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ –∂–∏—Ç—Ç—è: ${amount} –æ {time}',
        'stats_format': '{title}:\n–°—É–º–∞—Ä–Ω–æ: {spend:.2f} / +{profit:.2f}\n–°–µ—Ä–µ–¥–Ω—ñ–π –¥–æ—Ö—ñ–¥ –∑–∞ –¥–µ–Ω—å: {avg_day:.2f}\n–°–µ—Ä–µ–¥–Ω—ñ–π –¥–æ—Ö—ñ–¥ –∑–∞ –º—ñ—Å—è—Ü—å: {avg_month:.2f}',
        'stats_day_title': 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {date}',
        'stats_week_title': 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å –∑ {week_start}',
        'stats_month_title': 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {month}',
        'balance_format': 'üí∞ –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${balance:.2f}\n–ó–∞–≥–∞–ª—å–Ω—ñ –ø—Ä–∏–±—É—Ç–∫–∏: +{profit:.2f}\n–ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: {spend:.2f}',
        'exported': 'üìã –î–∞–Ω—ñ –≤–∏–∫–∞—á–∞–Ω–æ —É —Ñ–∞–π–ª—ñ CSV!',
        'no_data_graph': 'üìä –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫–∞ –∑–∞ {period}.',
        'graph_sent': '–ì—Ä–∞—Ñ—ñ–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!',
        'cancel_choose': '–°–∫—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –¥—ñ–π —Å–∫–∞—Å—É–≤–∞—Ç–∏?',
        'cancel_1': '1 –¥—ñ—è',
        'cancel_2': '2 –¥—ñ—ó',
        'cancel_3': '3 –¥—ñ—ó',
        'canceled_spend': '‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ –≤–∏—Ç—Ä–∞—Ç—É ({category}): ${amount} –æ {time}',
        'canceled_profit': '‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ –ø—Ä–∏–±—É—Ç–æ–∫: ${amount} –æ {time}',
        'no_actions': '‚ùå –ù–µ–º–∞—î –¥—ñ–π –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—å–æ–≥–æ–¥–Ω—ñ.',
        'invalid_amount': '–í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 50).'
    },
    'ru': {
        'start': '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
        'add_spend': 'üìâ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥',
        'add_profit': 'üìà –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥',
        'add_living': 'üè† –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –∂–∏–∑–Ω—å',
        'stats_day': 'üìä –ó–∞ –¥–µ–Ω—å',
        'stats_week': 'üìä –ó–∞ –Ω–µ–¥–µ–ª—é',
        'stats_month': 'üìä –ó–∞ –º–µ—Å—è—Ü',
        'balance': 'üí∞ –ë–∞–ª–∞–Ω—Å',
        'export': 'üìã –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ',
        'graph_day': 'üìä –ì—Ä–∞—Ñ–∏–∫ –∑–∞ –¥–µ–Ω—å',
        'graph_month': 'üìä –ì—Ä–∞—Ñ–∏–∫ –∑–∞ –º–µ—Å—è—Ü',
        'cancel': '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è',
        'choose_category': '–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤:',
        'food': 'üçî –ï–¥–∞',
        'transport': 'üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
        'entertainment': 'üéâ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
        'living': 'üè† –ñ–∏–∑–Ω—å',
        'other': '–î—Ä—É–≥–æ–µ',
        'enter_spend': '–í–≤–µ–¥–∏ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ –¥–ª—è "{category}" (–Ω–∞–ø—Ä–∏–º–µ—Ä, 50):',
        'enter_profit': '–í–≤–µ–¥–∏ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100):',
        'enter_living': '–í–≤–µ–¥–∏ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –∂–∏–∑–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 200):',
        'added_spend': 'üìâ –î–æ–±–∞–≤–ª–µ–Ω —Ä–∞—Å—Ö–æ–¥ ({category}): ${amount} –≤ {time}',
        'added_profit': 'üìà –î–æ–±–∞–≤–ª–µ–Ω –¥–æ—Ö–æ–¥: ${amount} –≤ {time}',
        'added_living': 'üè† –î–æ–±–∞–≤–ª–µ–Ω—ã —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –∂–∏–∑–Ω—å: ${amount} –≤ {time}',
        'stats_format': '{title}:\n–ò—Ç–æ–≥–æ: {spend:.2f} / +{profit:.2f}\n–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –∑–∞ –¥–µ–Ω—å: {avg_day:.2f}\n–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: {avg_month:.2f}',
        'stats_day_title': 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {date}',
        'stats_week_title': 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é —Å {week_start}',
        'stats_month_title': 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {month}',
        'balance_format': 'üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance:.2f}\n–û–±—â–∏–µ –¥–æ—Ö–æ–¥—ã: +{profit:.2f}\n–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {spend:.2f}',
        'exported': 'üìã –î–∞–Ω–Ω—ã–µ —Å–∫–∞—á–∞–Ω—ã –≤ —Ñ–∞–π–ª–µ CSV!',
        'no_data_graph': 'üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞ {period}.',
        'graph_sent': '–ì—Ä–∞—Ñ–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!',
        'cancel_choose': '–°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –æ—Ç–º–µ–Ω–∏—Ç—å?',
        'cancel_1': '1 –¥–µ–π—Å—Ç–≤–∏–µ',
        'cancel_2': '2 –¥–µ–π—Å—Ç–≤–∏—è',
        'cancel_3': '3 –¥–µ–π—Å—Ç–≤–∏—è',
        'canceled_spend': '‚ùå –û—Ç–º–µ–Ω–µ–Ω —Ä–∞—Å—Ö–æ–¥ ({category}): ${amount} –≤ {time}',
        'canceled_profit': '‚ùå –û—Ç–º–µ–Ω–µ–Ω –¥–æ—Ö–æ–¥: ${amount} –≤ {time}',
        'no_actions': '‚ùå –ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è.',
        'invalid_amount': '–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 50).'
    },
    'en': {
        'start': 'Choose an action:',
        'add_spend': 'üìâ Add expense',
        'add_profit': 'üìà Add income',
        'add_living': 'üè† Add living expenses',
        'stats_day': 'üìä Daily',
        'stats_week': 'üìä Weekly',
        'stats_month': 'üìä Monthly',
        'balance': 'üí∞ Balance',
        'export': 'üìã Download data',
        'graph_day': 'üìä Daily graph',
        'graph_month': 'üìä Monthly graph',
        'cancel': '‚ùå Cancel last actions',
        'choose_category': 'Choose expense category:',
        'food': 'üçî Food',
        'transport': 'üöó Transport',
        'entertainment': 'üéâ Entertainment',
        'living': 'üè† Living',
        'other': 'Other',
        'enter_spend': 'Enter expense amount for "{category}" (e.g., 50):',
        'enter_profit': 'Enter income amount (e.g., 100):',
        'enter_living': 'Enter living expense amount (e.g., 200):',
        'added_spend': 'üìâ Added expense ({category}): ${amount} at {time}',
        'added_profit': 'üìà Added income: ${amount} at {time}',
        'added_living': 'üè† Added living expenses: ${amount} at {time}',
        'stats_format': '{title}:\nTotal: {spend:.2f} / +{profit:.2f}\nAverage daily income: {avg_day:.2f}\nAverage monthly income: {avg_month:.2f}',
        'stats_day_title': 'üìä Stats for {date}',
        'stats_week_title': 'üìä Stats for week starting {week_start}',
        'stats_month_title': 'üìä Stats for {month}',
        'balance_format': 'üí∞ Current balance: ${balance:.2f}\nTotal income: +{profit:.2f}\nTotal expenses: {spend:.2f}',
        'exported': 'üìã Data downloaded in CSV file!',
        'no_data_graph': 'üìä No data for graph for {period}.',
        'graph_sent': 'Graph sent!',
        'cancel_choose': 'How many recent actions to cancel?',
        'cancel_1': '1 action',
        'cancel_2': '2 actions',
        'cancel_3': '3 actions',
        'canceled_spend': '‚ùå Canceled expense ({category}): ${amount} at {time}',
        'canceled_profit': '‚ùå Canceled income: ${amount} at {time}',
        'no_actions': '‚ùå No actions to cancel today.',
        'invalid_amount': 'Enter a valid amount (e.g., 50).'
    }
}

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
def load_data():
    try:
        with open(DATA_FILE, 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {'spends': {}, 'profits': {}, 'users': {}}

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
def save_data(data):
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=4)

# –í–∏–±—ñ—Ä –º–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def get_user_language(context, user_id):
    data = load_data()
    return data.get('users', {}).get(user_id, {}).get('language', 'ua')

def set_user_language(context, user_id, lang):
    data = load_data()
    if user_id not in data['users']:
        data['users'][user_id] = {}
    data['users'][user_id]['language'] = lang
    save_data(data)

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
async def start(update, context):
    user_id = str(update.effective_chat.id)
    lang = get_user_language(context, user_id)
    keyboard = [
        [InlineKeyboardButton(LANGUAGES[lang]['add_spend'], callback_data='add_spend'),
         InlineKeyboardButton(LANGUAGES[lang]['add_profit'], callback_data='add_profit')],
        [InlineKeyboardButton(LANGUAGES[lang]['add_living'], callback_data='add_living_expense')],
        [InlineKeyboardButton(LANGUAGES[lang]['stats_day'], callback_data='stats_day'),
         InlineKeyboardButton(LANGUAGES[lang]['stats_week'], callback_data='stats_week'),
         InlineKeyboardButton(LANGUAGES[lang]['stats_month'], callback_data='stats_month')],
        [InlineKeyboardButton(LANGUAGES[lang]['balance'], callback_data='balance'),
         InlineKeyboardButton(LANGUAGES[lang]['export'], callback_data='export')],
        [InlineKeyboardButton(LANGUAGES[lang]['graph_day'], callback_data='graph_day'),
         InlineKeyboardButton(LANGUAGES[lang]['graph_month'], callback_data='graph_month')],
        [InlineKeyboardButton(LANGUAGES[lang]['cancel'], callback_data='cancel_last')],
        [InlineKeyboardButton("üá∫üá¶ UA", callback_data='lang_ua'),
         InlineKeyboardButton("üá∑üá∫ RU", callback_data='lang_ru'),
         InlineKeyboardButton("üá¨üáß EN", callback_data='lang_en')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(LANGUAGES[lang]['start'], reply_markup=reply_markup)
    logger.info(f"User {user_id} started bot with language {lang}")

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button(update, context):
    query = update.callback_query
    await query.answer()
    user_id = str(query.message.chat_id)
    lang = get_user_language(context, user_id)

    if query.data.startswith('lang_'):
        new_lang = query.data.split('_')[1]
        set_user_language(context, user_id, new_lang)
        await start(query, context)
    elif query.data == 'add_spend':
        keyboard = [
            [InlineKeyboardButton(LANGUAGES[lang]['food'], callback_data='category_food'),
             InlineKeyboardButton(LANGUAGES[lang]['transport'], callback_data='category_transport')],
            [InlineKeyboardButton(LANGUAGES[lang]['entertainment'], callback_data='category_entertainment'),
             InlineKeyboardButton(LANGUAGES[lang]['living'], callback_data='add_living_expense')],
            [InlineKeyboardButton(LANGUAGES[lang]['other'], callback_data='category_other')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(LANGUAGES[lang]['choose_category'], reply_markup=reply_markup)
    elif query.data.startswith('category_'):
        category = query.data.split('_')[1]
        context.user_data['category'] = category
        context.user_data['action'] = 'add_spend'
        await query.edit_message_text(LANGUAGES[lang]['enter_spend'].format(category=category))
    elif query.data == 'add_profit':
        await query.edit_message_text(LANGUAGES[lang]['enter_profit'])
        context.user_data['action'] = 'add_profit'
    elif query.data == 'add_living_expense':
        await query.edit_message_text(LANGUAGES[lang]['enter_living'])
        context.user_data['action'] = 'add_living_expense'
    elif query.data == 'stats_day':
        await show_stats(query, context, user_id, 'day')
    elif query.data == 'stats_week':
        await show_stats(query, context, user_id, 'week')
    elif query.data == 'stats_month':
        await show_stats(query, context, user_id, 'month')
    elif query.data == 'balance':
        await show_balance(query, context, user_id)
    elif query.data == 'export':
        await export_data(query, context, user_id)
    elif query.data == 'graph_day':
        await send_graph(query, context, user_id, 'day')
    elif query.data == 'graph_month':
        await send_graph(query, context, user_id, 'month')
    elif query.data == 'cancel_last':
        keyboard = [
            [InlineKeyboardButton(LANGUAGES[lang]['cancel_1'], callback_data='cancel_1'),
             InlineKeyboardButton(LANGUAGES[lang]['cancel_2'], callback_data='cancel_2'),
             InlineKeyboardButton(LANGUAGES[lang]['cancel_3'], callback_data='cancel_3')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(LANGUAGES[lang]['cancel_choose'], reply_markup=reply_markup)
    elif query.data.startswith('cancel_'):
        count = int(query.data.split('_')[1])
        await cancel_last_action(query, context, user_id, count)

# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update, context):
    user_id = str(update.effective_chat.id)
    lang = get_user_language(context, user_id)
    action = context.user_data.get('action')
    if not action:
        await update.message.reply_text('–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä–∏ –¥—ñ—é —á–µ—Ä–µ–∑ /start.')
        return

    try:
        amount = float(update.message.text)
        if amount <= 0:
            raise ValueError
        data = load_data()
        now = datetime.now(KYIV_TZ).strftime('%Y-%m-%d %H:%M')
        date = datetime.now(KYIV_TZ).strftime('%Y-%m-%d')

        if action == 'add_spend':
            if user_id not in data['spends']:
                data['spends'][user_id] = {}
            if date not in data['spends'][user_id]:
                data['spends'][user_id][date] = []
            category = context.user_data.get('category', 'other')
            data['spends'][user_id][date].append({'amount': -amount, 'time': now, 'type': 'spend', 'category': category})
            save_data(data)
            await update.message.reply_text(LANGUAGES[lang]['added_spend'].format(category=category, amount=amount, time=now.split(" ")[1]))
        elif action == 'add_profit':
            if user_id not in data['profits']:
                data['profits'][user_id] = {}
            if date not in data['profits'][user_id]:
                data['profits'][user_id][date] = []
            data['profits'][user_id][date].append({'amount': amount, 'time': now, 'type': 'profit'})
            save_data(data)
            await update.message.reply_text(LANGUAGES[lang]['added_profit'].format(amount=amount, time=now.split(" ")[1]))
        elif action == 'add_living_expense':
            if user_id not in data['spends']:
                data['spends'][user_id] = {}
            if date not in data['spends'][user_id]:
                data['spends'][user_id][date] = []
            data['spends'][user_id][date].append({'amount': -amount, 'time': now, 'type': 'living', 'category': 'living'})
            save_data(data)
            await update.message.reply_text(LANGUAGES[lang]['added_living'].format(amount=amount, time=now.split(" ")[1]))

        context.user_data['action'] = None
        context.user_data['category'] = None
        await show_stats(update, context, user_id, 'day')
    except ValueError:
        await update.message.reply_text(LANGUAGES[lang]['invalid_amount'])

# –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑ —Å–µ—Ä–µ–¥–Ω—ñ–º –¥–æ—Ö–æ–¥–æ–º
async def show_stats(update_or_query, context, user_id, period='day'):
    data = load_data()
    lang = get_user_language(context, user_id)
    now = datetime.now(KYIV_TZ)

    # –û–±—á–∏—Å–ª–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–∏—Ö –≤–∏—Ç—Ä–∞—Ç —ñ –ø—Ä–∏–±—É—Ç–∫—ñ–≤
    if period == 'day':
        date = now.strftime('%Y-%m-%d')
        total_spend = sum(item['amount'] for item in data['spends'].get(user_id, {}).get(date, []))
        total_profit = sum(item['amount'] for item in data['profits'].get(user_id, {}).get(date, []))
        days = 1
        title = LANGUAGES[lang]['stats_day_title'].format(date=date)
    elif period == 'week':
        week_start = (now - timedelta(days=now.weekday())).strftime('%Y-%m-%d')
        total_spend = 0
        total_profit = 0
        days = min((now - datetime.strptime(week_start, '%Y-%m-%d').replace(tzinfo=KYIV_TZ)).days + 1, 7)
        for date in data.get('spends', {}).get(user_id, {}).keys():
            if date >= week_start:
                total_spend += sum(item['amount'] for item in data['spends'][user_id][date])
        for date in data.get('profits', {}).get(user_id, {}).keys():
            if date >= week_start:
                total_profit += sum(item['amount'] for item in data['profits'][user_id][date])
        title = LANGUAGES[lang]['stats_week_title'].format(week_start=week_start)
    else:  # month
        month_start = now.replace(day=1).strftime('%Y-%m-%d')
        total_spend = 0
        total_profit = 0
        days = (now - now.replace(day=1)).days + 1
        for date in data.get('spends', {}).get(user_id, {}).keys():
            if date.startswith(now.strftime('%Y-%m')):
                total_spend += sum(item['amount'] for item in data['spends'][user_id][date])
        for date in data.get('profits', {}).get(user_id, {}).keys():
            if date.startswith(now.strftime('%Y-%m')):
                total_profit += sum(item['amount'] for item in data['profits'][user_id][date])
        title = LANGUAGES[lang]['stats_month_title'].format(month=now.strftime("%B %Y"))

    # –û–±—á–∏—Å–ª–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ –¥–æ—Ö–æ–¥—É
    avg_day = (total_profit + total_spend) / days if days > 0 else 0
    avg_month = avg_day * 30  # –ü—Ä–∏–±–ª–∏–∑–Ω–æ 30 –¥–Ω—ñ–≤ —É –º—ñ—Å—è—Ü—ñ

    keyboard = [
        [InlineKeyboardButton(LANGUAGES[lang]['add_spend'], callback_data='add_spend'),
         InlineKeyboardButton(LANGUAGES[lang]['add_profit'], callback_data='add_profit')],
        [InlineKeyboardButton(LANGUAGES[lang]['add_living'], callback_data='add_living_expense')],
        [InlineKeyboardButton(LANGUAGES[lang]['stats_day'], callback_data='stats_day'),
         InlineKeyboardButton(LANGUAGES[lang]['stats_week'], callback_data='stats_week'),
         InlineKeyboardButton(LANGUAGES[lang]['stats_month'], callback_data='stats_month')],
        [InlineKeyboardButton(LANGUAGES[lang]['balance'], callback_data='balance'),
         InlineKeyboardButton(LANGUAGES[lang]['export'], callback_data='export')],
        [InlineKeyboardButton(LANGUAGES[lang]['graph_day'], callback_data='graph_day'),
         InlineKeyboardButton(LANGUAGES[lang]['graph_month'], callback_data='graph_month')],
        [InlineKeyboardButton(LANGUAGES[lang]['cancel'], callback_data='cancel_last')],
        [InlineKeyboardButton("üá∫üá¶ UA", callback_data='lang_ua'),
         InlineKeyboardButton("üá∑üá∫ RU", callback_data='lang_ru'),
         InlineKeyboardButton("üá¨üáß EN", callback_data='lang_en')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    response = LANGUAGES[lang]['stats_format'].format(
        title=title, 
        spend=total_spend, 
        profit=total_profit, 
        avg_day=avg_day, 
        avg_month=avg_month
    )
    if hasattr(update_or_query, 'message'):
        await update_or_query.message.reply_text(response, reply_markup=reply_markup)
    else:
        await update_or_query.edit_message_text(response, reply_markup=reply_markup)

# –ü–æ–∫–∞–∑ –±–∞–ª–∞–Ω—Å—É
async def show_balance(query, context, user_id):
    data = load_data()
    lang = get_user_language(context, user_id)
    total_spend = sum(sum(item['amount'] for item in dates.values()) for dates in data.get('spends', {}).get(user_id, {}).values())
    total_profit = sum(sum(item['amount'] for item in dates.values()) for dates in data.get('profits', {}).get(user_id, {}).values())
    balance = total_profit + total_spend
    response = LANGUAGES[lang]['balance_format'].format(balance=balance, profit=total_profit, spend=total_spend)
    await query.edit_message_text(response)

# –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö —É CSV
async def export_data(query, context, user_id):
    data = load_data()
    lang = get_user_language(context, user_id)
    filename = f'finance_{user_id}.csv'
    with open(filename, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(['Type', 'Category', 'Amount', 'Time', 'Date'])
        for date, spends in data.get('spends', {}).get(user_id, {}).items():
            for item in spends:
                writer.writerow([item['type'], item.get('category', 'other'), item['amount'], item['time'].split(' ')[1], date])
        for date, profits in data.get('profits', {}).get(user_id, {}).items():
            for item in profits:
                writer.writerow([item['type'], 'profit', item['amount'], item['time'].split(' ')[1], date])
    with open(filename, 'rb') as f:
        await query.message.reply_document(document=f, filename=filename)
    await query.edit_message_text(LANGUAGES[lang]['exported'])

# –ì—Ä–∞—Ñ—ñ–∫ –∑–∞ –¥–µ–Ω—å –∞–±–æ –º—ñ—Å—è—Ü—å
async def send_graph(query, context, user_id, period='day'):
    data = load_data()
    lang = get_user_language(context, user_id)
    now = datetime.now(KYIV_TZ)
    if period == 'day':
        date = now.strftime('%Y-%m-%d')
        spends = data.get('spends', {}).get(user_id, {}).get(date, [])
        profits = data.get('profits', {}).get(user_id, {}).get(date, [])
        title = LANGUAGES[lang]['stats_day_title'].format(date=date)
    else:  # month
        month_start = now.replace(day=1).strftime('%Y-%m-%d')
        spends = []
        profits = []
        for date in data.get('spends', {}).get(user_id, {}).keys():
            if date.startswith(now.strftime('%Y-%m')):
                spends.extend(data['spends'][user_id][date])
        for date in data.get('profits', {}).get(user_id, {}).keys():
            if date.startswith(now.strftime('%Y-%m')):
                profits.extend(data['profits'][user_id][date])
        title = LANGUAGES[lang]['stats_month_title'].format(month=now.strftime("%B %Y"))

    times = [item['time'].split(' ')[1] for item in spends + profits]
    amounts = [item['amount'] for item in spends + profits]
    
    if not times:
        await query.edit_message_text(LANGUAGES[lang]['no_data_graph'].format(period=period))
        return
    
    plt.figure(figsize=(10, 5))
    plt.plot(times, amounts, marker='o', linestyle='-', color='b')
    plt.title(title)
    plt.xlabel('Time' if lang == 'en' else '–ß–∞—Å')
    plt.ylabel('Amount ($)' if lang == 'en' else '–°—É–º–º–∞ ($)' if lang == 'ru' else '–°—É–º–∞ ($)')
    plt.xticks(rotation=45)
    plt.grid(True)
    
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    await query.message.reply_photo(photo=buf, caption=title)
    buf.close()
    plt.close()
    await query.edit_message_text(LANGUAGES[lang]['graph_sent'])

# –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Ö –¥—ñ–π
async def cancel_last_action(query, context, user_id, count=1):
    data = load_data()
    lang = get_user_language(context, user_id)
    date = datetime.now(KYIV_TZ).strftime('%Y-%m-%d')
    spends = data.get('spends', {}).get(user_id, {}).get(date, [])
    profits = data.get('profits', {}).get(user_id, {}).get(date, [])

    all_actions = sorted(spends + profits, key=lambda x: x['time'], reverse=True)
    if not all_actions:
        await query.edit_message_text(LANGUAGES[lang]['no_actions'])
        return

    canceled_count = min(count, len(all_actions))
    canceled_items = all_actions[:canceled_count]
    response = f"–°–∫–∞—Å–æ–≤–∞–Ω–æ {canceled_count} –¥—ñ–π:\n" if lang == 'ua' else f"–û—Ç–º–µ–Ω–µ–Ω–æ {canceled_count} –¥–µ–π—Å—Ç–≤–∏–π:\n" if lang == 'ru' else f"Canceled {canceled_count} actions:\n"
    
    for item in canceled_items:
        if item in spends:
            spends.remove(item)
            response += LANGUAGES[lang]['canceled_spend'].format(category=item.get('category', 'other'), amount=-item['amount'], time=item['time'].split(" ")[1]) + '\n'
        elif item in profits:
            profits.remove(item)
            response += LANGUAGES[lang]['canceled_profit'].format(amount=item['amount'], time=item['time'].split(" ")[1]) + '\n'
    
    data['spends'][user_id][date] = spends
    data['profits'][user_id][date] = profits
    save_data(data)
    
    await query.edit_message_text(response.strip())
    await show_stats(query, context, user_id, 'day')

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.run_polling()

if __name__ == '__main__':
    main()